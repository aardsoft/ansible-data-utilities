- set_fact:
    _wireguard_confdir: /etc/wireguard

- set_fact:
    _wg: wg
    _wg_name: "{{_iface.key}}"

- set_fact:
    _wireguard_confdir: "{{homebrew_prefix}}/etc/wireguard"
  when: >
    ansible_os_family == "Darwin"

- set_fact:
    _wg: "{{homebrew_prefix}}/bin/wg"
  when: >
    ansible_os_family == "Darwin"

- ansible.builtin.include_tasks: _manage_wireguard_install.yml
  when: >
    _wg_installed is undefined or
    _wg_installed == False

- stat:
    path: "{{wireguard[_iface.key].interface.private_key_file}}"
  register: _wireguard_private_key_file
  when: wireguard[_iface.key].interface.private_key_file is defined
  tags:
    - access_setup

- stat:
    path: "{{wireguard[_iface.key].interface.public_key_file}}"
  register: _wireguard_public_key_file
  when: wireguard[_iface.key].interface.public_key_file is defined
  tags:
    - access_setup

- name: "{{_wg_name}}: copy wireguard private key from passdb"
  ansible.builtin.template:
    src: wireguard_key.j2
    dest: "{{wireguard[_iface.key].interface.private_key_file}}"
    owner: root
    group: "{{_root_group}}"
    mode: 0600
  register: _wg_key_copy
  when: >
    wireguard[_iface.key].interface.private_key_file is defined and
    wireguard[_iface.key].interface.passdb_entry is defined

- name: "{{_wg_name}}: create wireguard private key"
  shell: "{{_wg}} genkey > {{wireguard[_iface.key].interface.private_key_file}}"
  when: >
    wireguard[_iface.key].interface.private_key_file is defined and
    _wireguard_private_key_file.stat.exists == False
  register: _wg_key_create
  tags:
    - access_setup

- name: "{{_wg_name}}: adjust wireguard private key permissions"
  file:
    path: "{{wireguard[_iface.key].interface.private_key_file}}"
    owner: root
    mode: 0600
  when: >
    wireguard[_iface.key].interface.private_key_file is defined
  tags:
    - access_setup

# TODO: this should also get recreated if the private key changes in one of the two steps above
- name: "{{_wg_name}}: create wireguard public key"
  shell: "{{_wg}} pubkey < {{wireguard[_iface.key].interface.private_key_file}} > {{wireguard[_iface.key].interface.public_key_file}}"
  when: >
    wireguard[_iface.key].interface.private_key_file is defined and
    wireguard[_iface.key].interface.public_key_file is defined and
    (_wireguard_public_key_file.stat.exists == False or
     (_wg_key_copy is defined and _wg_key_copy is changed) or
     (_wg_key_create is defined and _wg_key_create is changed))
  tags:
    - access_setup

- name: "{{_wg_name}}: read private key file"
  slurp:
    src: "{{wireguard[_iface.key].interface.private_key_file}}"
  when: wireguard[_iface.key].interface.private_key_file is defined
  register: _wg_private_key
  tags:
    - access_setup

- name: "{{_wg_name}}: configure wireguard interfaces"
  template:
   src: wireguard.conf.j2
   dest: "{{_wireguard_confdir}}/{{_iface.key}}.conf"
   mode: 0600
  register: __iface_changed
  tags:
    - access_setup

# TODO: we should just restart the service on change, but always call the
#       service setup. Currently that's skipped as the service setup on
#       Darwin is still a bit WIP, and doesn't handle service changes too
#       gracefully
- name: "{{_wg_name}}: enable and start wireguard service (Darwin)"
  ansible.builtin.include_tasks: manage_service.yml
  vars:
    service:
      name: com.wireguard.{{_iface.key}}
      standard_error: /var/log/{{_iface.key}}.err
      exec_start: "{{homebrew_prefix}}/bin/wg-quick up {{_iface.key}}"
      type: oneshot
  when: >
    ansible_os_family == "Darwin" and
    __iface_changed is defined and __iface_changed is changed and
    wireguard[_iface.key].interface.active|default(True) == True
  tags:
    - access_setup

- name: "{{_wg_name}}: enable and start wireguard service"
  systemd:
    name: "wg-quick@{{_iface.key}}"
    state: restarted
    enabled: yes
  when: >
    ansible_service_mgr == 'systemd' and
    __iface_changed is defined and __iface_changed is changed and
    wireguard[_iface.key].interface.active|default(True) == True
  tags:
    - access_setup
